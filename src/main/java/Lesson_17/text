                              Strem Application Programming Interface
Создание стрим
_______________
Stream<Integer> stream = Stream.empty(); - пустой
Stream<String> stream = Stream.of("a","b","c"); - на основе перечисления
List<Double> doubleList = List.of(1D,2D,3D); - на основе Collection
             Stream<Double> stream = doubleList.stream();
Map<String,Integer> map = Map.of("one",1,"two",2); -на основе Map,коллекция Set
             Strream<Entry<String,Integer>> stream = map.entrySet().stream()

double[] arr = new double[]{3.4,6.4} - из массива
 Stream<Double> stream = Arrays.stream(arr);

Stream<Double> stream = Stream.generate(()-> Math.random()); -бесконечный рандомный стрим
Stream<Double> stream = Stream.generate(()-> Math.random()).limit(3); - конечный рандомный стрим

Промежуточные операторы
_______________________

.map(); обрабатывает каждый элемент стрима типа T  в тип R, получаем стрим типизированный по R

        Stream<String> stream5 = Stream.of("aaa","bb","ccccc");
        Stream<Integer> streamInt = stream5.map(str -> str.length());
        streamInt.forEach(str-> System.out.println(str)); // 3 2 5

.filter(); проверяет каждый элемент стрим по условию, возвращает стрим тогоже типа с элементами true

        Stream.of(1,2,3,4,5,6,7,8,9).filter(integer -> integer % 2 == 0).forEach(System.out::println); // 2 4 6 8
        Stream.of("ski","","ll", "   ","box").filter(s -> !s.isBlank()).forEach(System.out::print);  //skillbox

.distinct(); пропускат в новый стрим только уникальные элементы, проверка методом HashCode() and equals()

        Stream.of("zzz","zzz","ll","ll","box").distinct().forEach(System.out::print);

        Random random = new Random(2);                  // рандом с указанием seed - 2 - начальная почка случ послед
        Stream.generate(()->random.nextInt(6))          // бесконечность от 0 до 5 включ
                .limit(10)                                    // ограничиваем 10
                .distinct()                                   // удаляем повторы
                .map(integer -> integer++)                    // добавляем +1
                .forEach(System.out::print);

.sorted(); сортирует элементы стримаб если классы стрима имплемнтировали Comporable иначе требуется Comparator

      Stream.of("SFAF","FWEGFG","ADAFQFW").sorted().forEach(s -> System.out.print(" " + s));

                        Stream.of(List.of(1,6,3),List.of(8,4),List.of(1))
                                .sorted(Comparator.comparing(List::size))
                                .forEach(s -> System.out.print(" " + s));

.limit(); ограничиват количество элементов в стриме с первего до значения

.peek(); используется для логитования (Логирование это процесс записи каких-либо событий, которые происходят в коде)

                "abcd".chars()                                    // получаем IntStream из строки
                .peek(c-> System.out.print("char:" + (char) c))
                .forEach(i-> System.out.print(" " + i) );

.skip(); пропускает указанное количество первых элементов



Терминальный оператор
_____________________
на них стрим вызывается и  заканчивается
.forEach();

Stream<String> stream = Stream.of("a","b","c");
stream.forEach(str-> Sistem.out.println(str));

.cont(); возвращает long количество злементов в стрим

long count = Stream.of("skillbox","sendel","skillbox","sendel")
                .distinct()
                .count();
System.out.println(count); //2

.min();.max(); требуют Comparator и возвращает объект класа Optional - специальный класс, который хранит результат
результата может быть два:
- полученное значение, мин или мах
-empty , мин или мах не найдено, пустое значение

Optional<Integer> shortest = Stream.of(1,2,3,4)   // результат пакуется в объект Optional (обертка над null)
                .filter(integer -> integer > 10)
                .max(Integer::compare);                   // max отсутствует
        if (shortest.isPresent()) {
            System.out.println(shortest.get());               // метод get(); для получения
        }else {
            System.out.println("Максимальное значение не найдено!");
        }
        
        // или сразу бросить исключение
          int max = Stream.of(1,2,3,4)
                  .filter(integer -> integer > 10)
                  .max(Integer::compare)
                  .orElseThrow(()-> new NotFoundMaxException());
.anyMatch(); возващает true если найден хотябы один элемент по условию
        boolean hasMoreThen10 = Stream.of(1,2,5,9)
                .anyMatch(i->i>10);    // false

.noneMatch(); возвращает true, если все НЕ соответствуют условию
        boolean allMoreThen10 = Stream.of(1,2,6,7)
                .noneMatch(i -> i > 10);   // true

.allMatch(); возвращает true, если все  соответствуют условию
        boolean allLessThen10 = Stream.of(1,2,6,7)
                .allMatch(i -> i > 10);   // false
        System.out.println(allLessThen10);

.findFirst(); возвращает первый элемент стрима соответствующий условию
                Optional<Integer> first = Stream.of(1,20,30)
                        .filter(i-> i > 10)
                        .findFirst();    // 20
.findAny();  возвращает любой элемент стрима соответствующий условию (не угадать какой!!!! во многопоточности)
                Optional<Integer> any = Stream.of(20,30,40)
                        .parallel()
                        .filter(i-> i > 10)
                        .findFirst();    // 20 или 30 или 40
                System.out.println(any); //20

.collect(); собирает стрим в нужную структуру данных или объект с выбором конструктора коллекции .toCollection()
        Collection<Integer> collection = Stream.of(10,20,30,100)
                .collect(Collectors.toCollection(LinkedList::new));
        System.out.println(collection);  //[10, 20, 30, 100]

        Set<Integer> collection1 = Stream.of(10,20,20,100)
                .collect(Collectors.toCollection(TreeSet::new));
        System.out.println(collection1); //[10, 20, 100]  уникальны
        // или короткая запись
        List<Integer> integerList = Stream.of(10,50,60,10,100)
                .collect(Collectors.toList());
        // или неизменяемая коллекция, если в будущем менять будет брошено исключение
        Set<Integer> integerSet = Stream.of(10,60,50,100)
                .collect(Collectors.toUnmodifiableSet());
        // integerSet.add(2);  если включить будет исключение

//.toMap(); получаем map разными способами
        Map<String,Character> map = Stream.of(student1,student2,student3,student4,student5)
                .collect(Collectors.toMap(Student::getName,Student::getSex));
        System.out.println(map);   //{Natasha=f, Sveta=f, Peter=m, Dron=m, Alla=f}

        Map<String,Integer> map1 = Stream.of("a","a","c","b","c","a")
                .collect(Collectors.toMap(Function.identity(),(s)-> 1,(existing,current)-> ++ existing));
        System.out.println(map1);
        // или так с помощью .groupBy() подсчет количества элементов через группировку данных
        Map<String,Long> map2 = Stream.of("a","a","c","b","c","a")
                .collect(Collectors.groupingBy(Function.identity(),Collectors.counting()));
        System.out.println(map2);
        // или получить сумму всех оценок студентов
        Student student6 = new Student("Natasha", 'f', 51, 2, 1.3);
        Map<String,Double> map3 = Stream.of(student1,student2,student3,student4,student5,student6)
                .collect(Collectors.groupingBy(Student::getName,Collectors.summingDouble(Student::getGrade)));
        System.out.println(map3); // выводит ключ Natasha , а значение 2.6


