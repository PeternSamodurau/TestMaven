Socket - это конечная точка для связи между двумя машинами
 В Java, Socket используется для создания клиент-серверных приложений, которые работают на разных JRE
 Существует два типа программирования сокетов: ориентированный на соединение и без соединения
 Для ориентированного на соединение программирования сокетов используются классы Socket и ServerSocket,
 а для программирования без соединения - классы DatagramSocket и DatagramPacket
 Клиент в программировании сокетов должен знать две информации: IP-адрес сервера и номер порта
 Класс Socket используется для связи клиента и сервера
 Через этот класс можно читать и записывать сообщения
 Класс ServerSocket используется на стороне сервера
 Метод accept() класса ServerSocket блокирует консоль до тех пор, пока клиент не подключится
 После успешного подключения клиента он возвращает экземпляр Socket на стороне сервера

 SocketChannel - это выбираемый канал для потоковых соединяющихся сокетов в Java
 Он позволяет создавать неблокирующие соединения, а также поддерживает асинхронное завершение соединения
 SocketChannel не может быть создан для произвольного существующего сокета, но может быть создан путем вызова одного из методов open этого класса
 После создания SocketChannel открыт, но еще не подключен.
 Попытка выполнить операцию ввода-вывода на неподключенном канале приведет к возникновению исключения NotYetConnectedException
 После подключения SocketChannel остается подключенным до тех пор, пока не будет закрыт
 SocketChannel поддерживает неблокирующее соединение, которое может быть создано и процесс установления связи с удаленным сокетом
 может быть инициирован через метод connect для последующего завершения методом finishConnect
 SocketChannel поддерживает асинхронное завершение, которое аналогично асинхронной операции закрытия, указанной в классе Channel

Selector - это класс в Java, который предоставляет механизм для мультиплексирования SelectableChannel объектов
SelectableChannel - это канал, который может быть использован для ввода-вывода операций
Selector позволяет одному потоку обслуживать несколько каналов
Когда канал зарегистрирован с селектором, он возвращает SelectionKey, который представляет регистрацию канала с селектором
Selector поддерживает три набора ключей выбора: набор ключей содержит ключи, представляющие текущие регистрации каналов этого селектора
Этот набор возвращается методом keys.
Набор выбранных ключей - это набор ключей таких, что канал каждого ключа был обнаружен готовым для выполнения хотя бы одной из операций,
идентифицированных в наборе интересов ключа во время предыдущей операции выбора
Этот набор возвращается методом selectedKeys.
Набор отмененных ключей - это набор ключей, которые были отменены, но каналы которых еще не были дерегистрированы
Этот набор не является прямо доступным.
Он всегда является подмножеством набора ключей.
Все три набора пусты при создании нового селектора
Ключ добавляется в набор ключей селектора как побочный эффект регистрации канала через метод register этого класса
Отмененные ключи удаляются из набора ключей во время операций выбора
Сам набор ключей не может быть изменен напрямую.
Ключ добавляется в отмененный набор ключей своего селектора при его отмене, независимо от того, закрыт ли его канал или вызван ли его метод отмены
Отмена ключа приведет к дерегистрации его канала во время следующей операции выбора, при которой ключ будет удален из всех наборов ключей селектора
Ключи добавляются в набор выбранных ключей операциями выбора.
Ключ может быть удален непосредственно из набора выбранных ключей путем вызова метода remove набора или вызова метода remove итератора, полученного из набора.
Ключи никогда не удаляются из набора выбранных ключей никаким другим способом; они не удаляются, в частности, как побочный эффект операций выбора.
Ключи не могут быть добавлены непосредственно в набор выбранных ключей.