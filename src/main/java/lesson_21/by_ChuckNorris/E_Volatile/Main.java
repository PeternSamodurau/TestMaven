package lesson_21.by_ChuckNorris.E_Volatile;

//Volatile - не постоянный, изменчивый, используется для пометки переменной, как хранящейся только в основной памяти процессора
// не в cpu которые на каждом ядре

//ВАЖНО--- для синхронизации значения переменной между потоками ключ слово volatile используется тогда,
// когда только один поток может изменять значение переменной, а
// остальные потоки могу только читать!!!!!!!!!!!!!!!!!!!!

//Ключевое слово volatile в Java используется для указания, что переменная может быть изменена в разных потоках.
// Оно обеспечивает свойства видимости и упорядоченности для переменных.
//
//Видимость: Когда один поток изменяет значение volatile переменной, новое значение немедленно становится видимым для всех других потоков.
// Без volatile изменения, сделанные одним потоком в общей переменной, могут не быть видны другим потокам
// из-за кэширования значения переменной в локальном кэше потока.
//Упорядоченность: Операции чтения и записи с volatile переменными не могут быть переупорядочены.
// Это означает, что инструкции до записи volatile переменной не могут быть перемещены после нее,
// и инструкции после чтения volatile переменной не могут быть перемещены до нее.
//Однако, стоит отметить, что volatile не предоставляет взаимного исключения.
// Это означает, что оно не может быть использовано для замены synchronized блоков или Locks при работе с состоянием,
// которое может быть обновлено более чем одним потоком одновременно.

public class Main {
    public static void main(String[] args) {

        Thread thread = new Thread(new VolatileExample());
        thread.start();

        try {
            System.out.println("это поток main и он будет спать 3 сек " + Thread.currentThread().getName());
            Thread.sleep(3000);                      // SLEEP для потока Main, чтобы thread поработал 3 сек
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
        System.out.println("Main - After 3 seconds it is time to wake up");  // Main ПРОСЫПАЕТСЯ

        VolatileExample.aBoolean = false;                         // Main МЕНЯЕТ aBoolean на false, ОСТАНАВЛИВАЯ метод run()

        try {
            System.out.println(thread.getName());
            thread.join();                                       // MAIN ждет завершения потока thread
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
        System.out.println("Main - End of program");

        // Меод run не срабатывает (связано с памятью процессора см урок)
        // переменную aBoolean обозначаем как volatile и тогода работает
    }
}